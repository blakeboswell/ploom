% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oom_predict.R
\name{predict}
\alias{predict}
\alias{predict.oomlm}
\alias{predict_oomlm}
\alias{predict_oomlm_x}
\alias{predict.oomglm}
\alias{predict_oomglm}
\title{Predict values using \code{oomlm()} and \code{oomglm()} models}
\usage{
\method{predict}{oomlm}(object, new_data = NULL, std_error = FALSE,
  interval = NULL, level = 0.95, as_function = FALSE, ...)

predict_oomlm(object, new_data, std_error = FALSE, interval = NULL,
  level = 0.95)

predict_oomlm_x(object, x, std_error = FALSE, interval = NULL,
  level = 0.95)

\method{predict}{oomglm}(object, new_data, type = "response",
  std_error = FALSE, as_function = FALSE, ...)

predict_oomglm(object, type = "response", std_error = FALSE)
}
\arguments{
\item{object}{object inheriting from class \code{oomlm}}

\item{new_data}{observations for prediction}

\item{interval}{type of interval calculation}

\item{level}{tolerance/confidence level for interval calculation}

\item{as_function}{if TRUE a function with only a \code{data} argument is returned
for subsequent fitting}

\item{...}{ignored}

\item{type}{the type of prediction}

\item{srd_error}{indicates if the standard error of predicted means should
be returned}
}
\description{
Predict values using \code{oomlm()} and \code{oomglm()} models
}
\examples{
\donttest{
# fit an `oomlm` model
chunks <- oomdata_tbl(mtcars, chunk_size = 1)
x  <- fit(oomlm(mpg ~ cyl + disp + hp), chunks)

# call `predict`
pred <- predict(x, mtcars)
sum((pred - mtcars$mpg)^2)

# pass TRUE for the `as_function` argument and the
# return value will be a prediction function with
# only one argument for data
pred_fun <- predict(x, mtcars, as_function = TRUE)
rss      <- 0
while(!is.null(chunk <- chunks())) {
 rss <- rss + (pred_fun(chunk) - chunk[, "mpg"])^2
}
rss

# pass TRUE for the `se_fit` argument and the
# return value will include standard errors
# for the predicted means
pred <- predict(x, mtcars, se_fit = TRUE)
names(pred)
head(pred$se)

}
}
\keyword{internal}
