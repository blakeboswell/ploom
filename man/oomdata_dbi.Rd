% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oomdata.R
\name{oomdata_dbi}
\alias{oomdata_dbi}
\alias{oomdata_tbl}
\alias{oomdata_con}
\title{Iterate over \code{tibble()}, \code{DBIResult} or \code{connection()} in chunks.}
\usage{
oomdata_tbl(data, chunk_size, ...)

oomdata_dbi(data, chunk_size, ...)

oomdata_con(data, chunk_size, header = TRUE, col_names = NULL, ...)
}
\arguments{
\item{data}{\code{\link[=tibble]{tibble()}}, \code{DBIResult}, or \code{\link[=connection]{connection()}} object}

\item{chunk_size}{number of chunks to return with each iteration}

\item{...}{ignored}

\item{header}{logical, when TRUE colnames are determined from first row
of connection. if FALSE \code{col_names} must be provided.}

\item{col_names}{character vector. override \code{col_names} in first
row of connection when \code{header}is TRUE, or provide colnames
if \code{header} is FALSE.}
}
\description{
Returns a function that repeats the following cycle:
iteratively return \code{chunk_size} number of rows from \code{data} until data is exhausted;
then return \code{NULL} once.
}
\details{
\code{oomdata_*} functions are closures that return functions that
iteratively return \code{chunk_size} number of rows from \code{data} until all
rows have been returned. They will then return \code{NULL} once. They repeat
this cycle ad-infinitum.
}
\examples{
\donttest{
# `oomdata_tbl()` returns a function that when called will
# return `chunk_size` rows from a `tbl_df()`
chunks <- oomdata_tbl(mtcars, chunk_size = 16)

nrow(chunks())
nrow(chunks())

# when the data is exhausted the `oomdata_tbl()` function
# will return NULL once.
chunks()

# subsequent calls restart the cycle
nrow(chunks())
nrow(chunks())
chunks()

# `while` loops are useful for iterating over 
# `oomfeed` functions
while(!is.null(chunk <- chunks())){
  print(nrow(chunk))
}

# `oomdata_dbi()` returns a function that when called will
# return `chunk_size` rows from a query result set.
con <- DBI::dbConnect(RSQLite::SQLite(), path = ":dbname:")
dplyr::copy_to(con, mtcars, "mtcars", temporary = FALSE)
rs  <- DBI::dbSendQuery(con, "SELECT mpg, cyl, disp FROM mtcars")

chunks <- oomdata_dbi(rs, 16)

while(!is.null(chunk <- chunks())){
  print(nrow(chunk))
}

# ploom model functions automatically iterate over `oomdata` until 
# the source is exhausted (`oomlm()`, `oomlm_robust()`) or until 
# IRLS convergence (`oomglm()`, `oomglm_robust()`)
x <- fit(oomlm(mpg ~ cyl + disp), chunks)
y <- fit(oomglm(mpg ~ cyl + disp), chunks)

coef(x)
coef(y)

}
}
