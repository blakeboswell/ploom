% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oomlm.R
\name{oomlm}
\alias{oomlm}
\alias{AIC.oomlm}
\alias{coef.oomlm}
\alias{confint.oomlm}
\alias{deviance.oomlm}
\alias{family.oomlm}
\alias{formula.oomlm}
\alias{print.oomlm}
\alias{print.summary.oomlm}
\alias{summary.oomlm}
\alias{logLik.oomlm}
\alias{vcov.oomlm}
\alias{BIC.oomlm}
\title{Out of memory Linear model}
\usage{
oomlm(formula, weights = NULL, ...)
}
\arguments{
\item{formula}{A symbolic description of the model to be fitted of class
\code{formula}.}

\item{weights}{A one-sided, single term \code{formula} specifying weights.}

\item{...}{Ignored.}
}
\value{
An \code{oomlm} model is perpetually in an \emph{in-progress} state. It is up
to the user to know when fitting is complete. Therefore, only basic
model characteristics are provided as values. Statistics are available on
demand via summary and extractor functions.

\item{n}{The number of observations processed.}
\item{df.residual}{The residual degrees of freedom.}
\item{formula}{The \code{formula} object specifying the linear model.}
\item{terms}{The \code{terms} object specifying the terms of the linear model.}
\item{weights}{A one-sided, single term \code{formula} specifying weights.}
\item{call}{The matched call.}
}
\description{
Perform memory-efficient linear regression using
the AS274 bounded memory QR factorization algorithm.
}
\details{
The provided \code{formula} must not contain any data-dependent terms to ensure
consistency across calls to \code{fit()}. Factors are permitted, but the
levels of the factor must be the same across all data chunks. Empty factor
levels are accepted.
}
\examples{
\donttest{
# `oomlm` are defined with a call to `oomlm()` and fit to data
# with a call to `fit()`
x <- oomlm(mpg ~ cyl + disp)
x <- fit(x, mtcars)
print(x)


# `oomlm` models can be fit with more data via subsequent calls
# to the `fit()` function
chunks <- purrr::pmap(mtcars, list)

y <- oomlm(mpg ~ cyl + disp)

for(chunk in chunks) {
  y <- fit(y, chunk)
}

tidy(x)

# `oomdata_tbl()` facilitates iterating through data rows in chunks
chunks  <- oomdata_tbl(mtcars, chunk_size = 1)

# `fit()` will automatically fit over all chunks in an `oomdata`
# object
z <- oomlm(mpg ~ cyl + disp)
z <- fit(z, data = chunks)
summary(z)

}
}
\seealso{
\code{\link[=oomglm]{oomglm()}}
}
